use std::{
    ops::{Add, AddAssign, Mul, Sub, SubAssign},
    str::FromStr,
};

use itertools::Itertools;
use num::{BigUint, Integer, One, ToPrimitive, Zero};

const N: usize = 40;

/// The vector of moduli by which we will be reducing every limb.
/// These were chosen as p where p-1 = 2^12 * cofactor, where
/// cofactor is some 18-bit integer that makes p prime. In fact,
/// this list corresponds to the N smallest such cofactors.
pub const MODULI: [u32; N] = [
    1073754113u32,
    1073950721u32,
    1073958913u32,
    1073983489u32,
    1074196481u32,
    1074343937u32,
    1074442241u32,
    1074475009u32,
    1074515969u32,
    1074524161u32,
    1074548737u32,
    1074589697u32,
    1074597889u32,
    1074688001u32,
    1074696193u32,
    1074810881u32,
    1074835457u32,
    1074941953u32,
    1075007489u32,
    1075064833u32,
    1075105793u32,
    1075351553u32,
    1075376129u32,
    1075449857u32,
    1075507201u32,
    1075621889u32,
    1075695617u32,
    1075720193u32,
    1075752961u32,
    1076039681u32,
    1076064257u32,
    1076162561u32,
    1076187137u32,
    1076211713u32,
    1076269057u32,
    1076334593u32,
    1076391937u32,
    1076531201u32,
    1076613121u32,
    1076908033u32,
];

/// Coefficients {c_i} in the relation
/// integer = x_0 * c_0  +  x_1 * c_1  +  ...  + x_n-1 * c_n-1  mod prod_i p_i
/// where {x_i} are the integer's limbs.
///
/// The ith coefficient reduces to 1 modulo p_i, and to 0 modulo any other modulus.
/// It can be found as
///
/// c_i = [(prod_j p_j) / p_i]^-1  *  (prod_j p_j) / p_i
///
/// where the inverse is taken modulo p_i.
fn coefficients() -> [BigUint; N] {
    [
        BigUint::from_str("193878632913822292529241611653277036829129542652607162443217393564931036302175547421856596503891365547204404099520938654255528335607899719451107423913913870840450758897247650936794267011025691972441283106549536561566470971405755970579231590530681523286464789241352930515600016453931971119102015058565963086771192297248196555827392408660977880707739519666383474").unwrap(),
        BigUint::from_str("17176684968928340902180669365495861412270972143150909179386536475862687446955479581700571939357480767883718760527614782154770977200673659012816509396587760913207066255623380171061533924748405503461803360642455842591544270006103653452857488084708036991681128806120744879019447899317814447125710090038934164118652786052777346452499839024378987608683955899089016783").unwrap(),
        BigUint::from_str("6002625376925324444241742146410020612911720418770346397601213886661003803522379038208399155414899943676617932849486484316278747957517209251287248499694810497985150252790775228956153083565565320313631697824192282362447378146185971857499424462386538275011517853619850559985726181482284977946850084677381704842299652753962077922240488879999387064382315407947202893").unwrap(),
        BigUint::from_str("15070256715396077029082973617398914301868199741097454957892777451701573364712660015023021538431334443410393078979812977209812461969164896215156429715734769733352872310836050575652990033271142187557629912335700182222758654136743013026144603320851358937771774258340503651012058664506289873924372413209724166502240069570270256743814680914050960464574466322484565167").unwrap(),
        BigUint::from_str("10798064851953277236769239692566652043876647484113957421807340242554511325881018390921259844530886527015719089858034111349119244757181901573051275188036805410585184709142503623480467683468200765408771393473366618999392715568696208739845602832347803898441743620022142058887950987502030342499679564686019316974634834969534879321073697796029730910383084479780928705").unwrap(),
        BigUint::from_str("5539986274773183064832369019023147405635091705563725777352388833169847867149930020290556824103014269371881404099526702130792357105140794068151185443596585008244753654853526885627808843413866154721778983742189272695636540505449093829445218937958515457361778495461115906064887570489210170773287446540208837398295707691965302853469290929828933567076531079711610925").unwrap(),
        BigUint::from_str("17118296195747108831063868927578375727752811988509353899001579323547748998092666930721711453660528489424812784897340152683274387388814729663715117960762009582418433958411397095997925790982345832562539970853022202221007234929402797456405893648106362485692449945100877128708719918829234215650554996696067092557266690555188884583084684777266073509709370711246783144").unwrap(),
        BigUint::from_str("10930380766811791318931275427145336184703001037554547945890968190462359043259234943761816809561804987445280662351863000944637419866560132659992685308873651798883841315060858422418957040710761189666808940425257365131460220455921575563172631144405478227209163827870969293139985031010902949226379950018403121252568907860306200142820040632938063237441422919924606230").unwrap(),
        BigUint::from_str("8805402482422503187432250684375087708563967718343395003901282815495296539796015651099144710749514089332672036881790642849746597851710496190477758679577967368209408382447647341887798552325376352471398579251555083893146815597930583268347349931494111376405256303887754012412122379892791549813553476082750920178044179912406800399632877411147589768804341623868580434").unwrap(),
        BigUint::from_str("5903263343158697294638612413419958117141544827452787903776360082126592577809988454467607697591322283570038131115182515716215987285686502216235238748582843227569011124635882306183980065933319840188740146357760192454172623472678585402373556475529139285000583511288785412536152381334294709633023253238498674477366995849918590080655950031057345590237784202790036878").unwrap(),
        BigUint::from_str("13743935332167994238797921724368439775757825833175244858957040165529564608204390557445843763830640661512596393775331537091267209268431722440081041536593269800319407066994966034913303068474216221725449360858346281597653980675920476783729206551489164885354524764852482269077882404242060496083431591784080819921212271316894640096088478556830228430678332864827457220").unwrap(),
        BigUint::from_str("15187405499514804395106630089235712872783476126404957848965086932893936985462553797006184735379336489468504313965096542906348048322555178452068666395032704918424261965996675253499188919159203915390073282575261477196991450954757614751762478148067830564211832078903085874491520952704303496811929875946797405370195371486660546031544763817322237944884091033840134493").unwrap(),
        BigUint::from_str("7655310452490604677157271573487648869225669153939862575531016874037191182762934040986609411441009898008997803258428409727902707857786773955499592875498118688674241618403940164701058491167444803641218127944939709886509595781357220043758205937090218830769810363765316889405965206384311356838577160106465376975622152898512611266495341019328232891337073855166774189").unwrap(),
        BigUint::from_str("7545621807045990115362658002662032570573406895781340224485794898248026328288839875535327104929638553488621443015972410561157859419966062787744024970500867838546726937586949976333762727452973840879188566076592491495337454431995034017366889734188636590636088046495242723093537833416086277997095726489697528083069550962880974615009026811003650462662894492235762238").unwrap(),
        BigUint::from_str("9538090133389657554782708908665894031842810874855062696964469333147504373684422972117985712342204285569382543622089339343171750803447301856805953323370776392622231064995356338899620026573726530775550216576399600261162024690636976099812631151311681039271608715510468276047190702696452851924957531288117268278735325614710769887141159233522357584756236112070567610").unwrap(),
        BigUint::from_str("15023733659252699024501317078475659805382886923209326603605280768534868893116928986653989982394561527488625291063037713397260575210314560578813705044247260714710363309827213711605632600622730035196636210691010516139645390083335745885024724542889517773277322830472429965117871633648335364188584722055527247814639190679740664369182569547334696257858075014922886257").unwrap(),
        BigUint::from_str("2714969943004983789166326185183888478992798629271695483884250115304246474753929187746134340619434753495257815802296726796484011748344618389128768154680938286345102875452004182180907326977812318737937859242794253458528820571735585331218760531734184622877789221647211315857859015546008538302792469017782523467933715765682769536803588239868310284130284477765227153").unwrap(),
        BigUint::from_str("2171796151938774719653272487503166089485904641380418613914263894536628186327136272505846611997710920934436901243536719859518822587987005883066585222990215145642002273562188016183074579608539814786733936869754862398303749667638964239654141679709006835856416364445513243906047849038308117398237558829885832145086436127492963429201364746567498181088888765141653252").unwrap(),
        BigUint::from_str("16199378238217599637817037734720477166811052526280938834123286805883755910853363903765736846910946071705463551585063000439218532191556002832911053831272844829293948809935811914358199943334177184987308941181009364990760641929860409466469614399387396546855080599778576473539221663943308664949640169277449012812757868650410183976835962550336938522554582483752973537").unwrap(),
        BigUint::from_str("6716380639452053417594497139750108810856542691743001805572221324583931190585982464662792734626359737060796496243691947880007163218693387822622490281318090863092465521611975238582153116889863798754489881232101325822637961286651318744008602454688337224834244608921288436077323523178523345680485061937836456920620251285029460444759589039155762088185923304211639119").unwrap(),
        BigUint::from_str("17977069695411397807236415590677139100344150346667867707461074238107967437914344038223929306044985064331284684469428386419451497709088054723921915674401486857659843106763762554476476634289970744622580553789191004141568601885118194491189809125540761763986521122148209523501232072621057391922633773861886166285275704987075491504287109587129183632192902376066494457").unwrap(),
        BigUint::from_str("7491394177554979116645026860469407139959544811218895203711807711850757644936083187121353983414380060343670199060579667745910172442132232338910856133977027741555749509740334684118906881896052969084371436832519683579754008502556206735539804424596685800792831211956430440436084887767796692588035507647882675339837268944583420253063299769220409568546005169032734895").unwrap(),
        BigUint::from_str("16809445880185183956459096036522243032090112187258061442883088420469545768247788042028254002800839991441433300897840361368133789958719933279901447846418643941898350390888129450874939219083681703921741701912576563335093155075665365172078670808240911717413288963724792760430244497439446456157548342418485234965023110550102366474389945254282744521251993537072542440").unwrap(),
        BigUint::from_str("15352243855334036961619953936703925076222141454411111204214644520020276347141952857167115782177043969028469854696589111015864076139909243007558035490530314941924893321427150838142375978182619284214801920197014048701286262914718552346302242182103523045257872222769879510758746100611171089167600727996587084652591566919956535505492082956345500007502368550155161324").unwrap(),
        BigUint::from_str("16683799902163495360767573240864239728397954302226221404954134818912519953679061799198448974276274988937274995816732953803447541060849918415263710545457379750145792123422010133075931468857218874024175176836796633439561881550219573228748738412302802971486861696668154722999425846210372112337733190285927873870262483130814731054500541775847722977797352436570849124").unwrap(),
        BigUint::from_str("7123782731126202190003577937191305781020492723231105326746900967748278781131621522363995557590741102153125737538919874011378729115493218815220311452601698319593734521487497529419172691971353621118023559773492428278946683814070436178462131494876460123811522629365905274583419297191989271456714718632713114312450952304638074453687127572856226882596274845289805319").unwrap(),
        BigUint::from_str("7281760822431453527579648626617906327693130613986997127208624473487545266360913972747390364857654166676820446553351625368776315988565013269134800519317050204164029510215915619090739254865268662359071096626564979419061802556846721155301128768781625613882903874403397864864161901920637597199264076681165796446502153591749429774540701172252746908878194415245504814").unwrap(),
        BigUint::from_str("870373024473796435139368330049201143477797138337893997108842754991779850693709646779963031867559486724557391053276216011749235517605508171059777634925304881678284431775783364126808460057303465196644259284783395012408860600394775109911161929433634449279288932142414554574974839615476931789676779803263316024337836540017797593444477925477013105888051009105379004").unwrap(),
        BigUint::from_str("11641237011492182466526634519026620899531034037503938061663228750607818967400305740228111049833251827190871876448486289880905131250261548033214037612200201633716952647303541307888082073594183956886584623808681781935241142628068960673240839522189174745395395075135211291159542606163139698150289273325708297709012567757167223206459574089861108393381708954465898609").unwrap(),
        BigUint::from_str("7653256757682409854975529761311841849129558572643811772168031467644073779656984875320457839846983777745309819530512724901036714620261832208329190555647490805332135679799955439081109300571634436484225182786573725383327586598505024056270136942356563846021930130214304665870711986740434004686156941363252097482986250080755088633441427813246153748263253449424933472").unwrap(),
        BigUint::from_str("4179299512664595070507345261222310388813594010117088588648207766012498102753780210834497621450925825285805429740893948795816043296788730422822408714497062182186524984789608121727916047221590209791000907800420947619027836527936221511196585828206495430852434972625558314768857937851818091484137862539611517329303103722009019875431191368701242808894119795084036856").unwrap(),
        BigUint::from_str("8981654562835953501210305087152067460094840456037860615849588118468706363267448183647294379318453295530589334498407810768569014748093436783870194632982546791607980327894070004323932643341464517458111786632987332227089422201343553670540582281679807045901678548385247173382449514082371123540360063061594682743965016483813325078753761972806761075415650500656025994").unwrap(),
        BigUint::from_str("6144576360861767221652000358606146333024781471456151077809934447646111792596491781883063761777175966019484316512112147738915935601602396367734116768943757121487581518725334821935268603380191667949459531362198998823778085593328103525098757214841566480294666203755975803262576579098894434200063155419394212141096114836603078123681836465047413954167546135286447388").unwrap(),
        BigUint::from_str("17231440444903933640830502795928342765524993528177744610445118016193449244578265194795189589441049949178061495129842442957933217506789747881571624328877461419940604909755270074608802848964806863955493284530342163254513858831451257923097486677352823148231440191215821967416458576518349505210486393602340409520173248826579218265054627078315996421933607890131484580").unwrap(),
        BigUint::from_str("13472815782698470754265746338511601218854232062537679124759328787588664907448398180888878072268643938756229017136113112054005045336204230306189980137885067274170530022300902768996220788603866291191671985035196541649560905708085714808382203335555960622538628435480351070721974823246906477171377165937465062101266521113138043332153765447591039449432868451891665767").unwrap(),
        BigUint::from_str("16713694315922912798095887391701156839507564424309812839151749705263216469947296396718692950739230694191230460172203819544623082936233175518431231339771921368338660413378737748580314695853131027246925182346390144698402120329717523163605230193658811723109899472833392168924197284773724122554769338962725608459393130937865715447004254894261294738392589904914795632").unwrap(),
        BigUint::from_str("11714462269083439349510034360028471877489571759424064851637856720488046094312377065198166579150699548691467504245511588883691483568428086578235462462531967789267281257259842635002987781898367200493464325480734968052866299914803843961713838884200898699112981645883829817297285116725823599050268721813454386340008759259460692383134755141815172604172012469746078310").unwrap(),
        BigUint::from_str("18160063431449152083073308085091138441358397943574523660269289078243780461810391138998590016681852047008753921291518176816168399434308987035894342220962029709567365851098806324860672514113388390594418775967476491697911233705862223324061977349201139844090364932852304035422158141869198557525011895424735809739717969413855640678895792847427293926429946998825080541").unwrap(),
        BigUint::from_str("687179227242970571305706196791625518378915224654851117600659342390530448745176312587899147943375401518973644360875332667908661383834741819932021263727469553658785088378132617101096388191450506670561821496707869670109632650930844524703436098460696179673560584701991381410163184672785146860603599236637379584954408217620954909149218619858857854798715873619138861").unwrap(),
        BigUint::from_str("182545657731537028870439330464513931689084675943169819608582871303687786954555943714978475361485695994531979948457497487565607020604761619446786724468263334731258695484281566512306424668553962919520390097544590618781305759456272177522029904911214303290217774694599617479808820241330739799795373130173955702830756001751600345954340554455034422099019053086868007").unwrap()
    ]
}

/// Product of all moduli
fn product() -> BigUint {
    BigUint::from_str("18199434404034325312177999267002311994357606938498626579498048581149339163959044396476757650055414857370862102197107715647867731135587074189350849548226834114163330112679791715336607762968036166335589916084475125178134303691522088712111047588062070860283221255759249239007342992317236670942762366278418096087681912541870525709122755394246676329644162563005259777").unwrap()
}

/// An integer, smaller than the product of all moduli, represented
/// as the list of of residues modulo moduli {0, ..., num-1} for num <= N.
/// Every limb stores at least 31 bits, so the total capacity is 1240 bits.
pub struct MultiModInt {
    limbs: [u32; N],
}

impl Add for MultiModInt {
    type Output = MultiModInt;

    fn add(self, rhs: Self) -> Self::Output {
        let mut limbs = [0u32; N];
        for i in 0..N {
            limbs[i] = (self.limbs[i] + rhs.limbs[i]) % MODULI[i];
        }
        Self::Output { limbs }
    }
}

impl AddAssign for MultiModInt {
    fn add_assign(&mut self, rhs: Self) {
        for (i, p) in MODULI.into_iter().enumerate() {
            self.limbs[i] = (self.limbs[i] + rhs.limbs[i]) % p;
        }
    }
}

impl Sub for MultiModInt {
    type Output = MultiModInt;

    fn sub(self, rhs: Self) -> Self::Output {
        let mut limbs = [0u32; N];
        for i in 0..N {
            limbs[i] = (self.limbs[i] + (MODULI[i] - rhs.limbs[i])) % MODULI[i];
        }
        Self::Output { limbs }
    }
}

impl SubAssign for MultiModInt {
    fn sub_assign(&mut self, rhs: Self) {
        for (i, p) in MODULI.into_iter().enumerate() {
            self.limbs[i] = (self.limbs[i] + (p - rhs.limbs[i])) % p;
        }
    }
}

impl Mul for MultiModInt {
    type Output = MultiModInt;

    fn mul(self, rhs: Self) -> Self::Output {
        let mut limbs = [0u32; N];
        for i in 0..N {
            limbs[i] =
                (((self.limbs[i] as u64) * (rhs.limbs[i] as u64)) % (MODULI[i] as u64)) as u32;
        }
        Self { limbs }
    }
}

impl Zero for MultiModInt {
    fn zero() -> Self {
        Self { limbs: [0u32; N] }
    }

    fn is_zero(&self) -> bool {
        self.limbs == [0u32; N]
    }
}

impl One for MultiModInt {
    fn one() -> Self {
        Self { limbs: [1u32; N] }
    }
}

impl From<BigUint> for MultiModInt {
    fn from(value: BigUint) -> Self {
        let limbs = (0..N)
            .map(|i| value.mod_floor(&MODULI[i].into()).to_u32().unwrap())
            .collect_vec();
        Self {
            limbs: limbs.try_into().unwrap(),
        }
    }
}

impl From<MultiModInt> for BigUint {
    fn from(value: MultiModInt) -> BigUint {
        value
            .limbs
            .iter()
            .zip(coefficients().iter())
            .map(|(x, c)| x * c)
            .sum::<BigUint>()
            .mod_floor(&product())
    }
}

#[cfg(test)]
mod test {
    use itertools::Itertools;
    use num::{BigUint, Integer, One};
    use rand::{thread_rng, RngCore};

    use crate::multimod::{product, N};

    use super::{coefficients, MultiModInt, MODULI};

    #[test]
    fn coefficients_are_1_mod_p() {
        for (i, (p, c)) in MODULI.iter().zip(coefficients().iter()).enumerate() {
            assert_eq!(
                c.mod_floor(&Into::<BigUint>::into(*p)),
                BigUint::one(),
                "mismatch in position {i}\nmodulus is {p}\ncoefficient is {}",
                c
            );
        }
    }

    #[test]
    fn to_and_fro() {
        let mut rng = thread_rng();
        for _ in 0..1000 {
            let big = BigUint::from_slice(&(0..N).map(|_| rng.next_u32()).collect_vec())
                .mod_floor(&product());
            let multimod = MultiModInt::from(big.clone());
            let big_again = BigUint::from(multimod);
            assert_eq!(big, big_again);
        }
    }
}
