use rand_distr::num_traits::Zero;

use crate::{
    common::{merge, split},
    field::{roots_dict_zq, Felt},
};

/// This file contains an implementation of the NTT.
///
/// The NTT implemented here is for polynomials in Z_q[x]/(phi), with:
/// - The integer modulus q = 12 * 1024 + 1 = 12289
/// - The polynomial modulus phi = x ** n + 1, with n a power of two, n =< 1024
///
/// The code is voluntarily very similar to the code of the FFT.
/// It is probably possible to use templating to merge both implementations.

/// I2 is the inverse of 2 mod q.
const I2: Felt = Felt::new(6145);

/// sqr1 is a square root of (-1) mod q (currently, sqr1 = 1479).
const SQR1: Felt = roots_dict_zq(2)[0];

/// Split a polynomial f of 2N coefficients into two polynomials.
///
/// Args:
///     f_ntt: a polynomial
///
/// Format: NTT
fn split_ntt(f_ntt: &[Felt]) -> (Vec<Felt>, Vec<Felt>) {
    let n = f_ntt.len();
    let w = roots_dict_zq(n);
    let mut f0_ntt = vec![Felt::zero(); n / 2];
    let mut f1_ntt = vec![Felt::zero(); n / 2];
    for i in 0..n / 2 {
        f0_ntt[i] = I2 * (f_ntt[2 * i] + f_ntt[2 * i + 1]);
        f1_ntt[i] = I2 * (f_ntt[2 * i] - f_ntt[2 * i + 1]) * w[2 * i].inverse_or_zero();
    }
    (f0_ntt, f1_ntt)
}

/// Merge two polynomials into a single polynomial f in the NTT domain.
fn merge_ntt(f0_ntt: &[Felt], f1_ntt: &[Felt]) -> Vec<Felt> {
    let n = f0_ntt.len() * 2;
    let w = roots_dict_zq(n);
    let mut f_ntt = vec![Felt::zero(); n];
    for i in 0..(n / 2) {
        f_ntt[2 * i] = f0_ntt[i] + w[2 * i] * f1_ntt[i];
        f_ntt[2 * i + 1] = f0_ntt[i] - w[2 * i] * f1_ntt[i];
    }
    f_ntt
}

/// Compute the number-theoretic transform (NTT) of a polynomial, producing its
/// evaluations on the unit circle.
///
/// Format: input as coefficients, output as NTT
pub(crate) fn ntt(f: &[Felt]) -> Vec<Felt> {
    let n = f.len();
    if n > 2 {
        let (f0, f1) = split(f);
        let f0_ntt = ntt(&f0);
        let f1_ntt = ntt(&f1);
        merge_ntt(&f0_ntt, &f1_ntt)
    } else {
        let mut f_ntt = vec![Felt::zero(); 2];
        f_ntt[0] = f[0] + SQR1 * f[1];
        f_ntt[1] = f[0] - SQR1 * f[1];
        f_ntt
    }
}

/// Compute the inverse NTT
pub(crate) fn intt(f_ntt: &[Felt]) -> Vec<Felt> {
    let n = f_ntt.len();
    if n > 2 {
        let (f0_ntt, f1_ntt) = split_ntt(f_ntt);
        let f0 = intt(&f0_ntt);
        let f1 = intt(&f1_ntt);
        merge(&f0, &f1)
    } else {
        let mut f = vec![Felt::zero(); n];
        f[0] = I2 * (f_ntt[0] + f_ntt[1]);
        f[1] = I2 * Felt::new(1479).inverse_or_zero() * (f_ntt[0] - f_ntt[1]);
        f
    }
}

#[cfg(test)]
mod test {
    use itertools::Itertools;
    use rand::{thread_rng, Rng};

    use crate::{
        field::Felt,
        ntt::{intt, ntt},
        polynomial::Polynomial,
    };

    #[test]
    fn test_ntru_equation() {
        let mut rng = thread_rng();
        let n = 2;
        let f = (0..n).map(|_| rng.gen::<Felt>()).collect_vec();
        let g = (0..n).map(|_| rng.gen::<Felt>()).collect_vec();
        // for capital f: we don't care about shortness so sample at random
        let capital_f = (0..n).map(|_| rng.gen::<Felt>()).collect_vec();

        // compute capital_g from f, g, capital_f
        let f_ntt = ntt(&f);
        let g_ntt = ntt(&g);
        let capital_f_ntt = ntt(&capital_f);
        let capital_g_ntt = g_ntt
            .into_iter()
            .zip(capital_f_ntt)
            .zip(f_ntt)
            .map(|((g, cap_f), f)| g * cap_f / f)
            .collect_vec();
        let capital_g = intt(&capital_g_ntt);
        // todo: batch-inverse f_ntt

        assert_eq!(
            Polynomial::new(capital_g.clone())
                .karatsuba(&Polynomial::new(f.clone()))
                .reduce_by_cyclotomic(n),
            Polynomial::new(g.clone())
                .karatsuba(&Polynomial::new(capital_f.clone()))
                .reduce_by_cyclotomic(n)
        );
    }

    #[test]
    fn test_ntt_linearity() {
        let mut rng = thread_rng();
        let a: Felt = rng.gen();
        let b: Felt = rng.gen();
        const N: usize = 256;
        let v: [Felt; N] = (0..N).map(|_| rng.gen()).collect_vec().try_into().unwrap();
        let w: [Felt; N] = (0..N).map(|_| rng.gen()).collect_vec().try_into().unwrap();

        let v_ntt = ntt(&v);
        let w_ntt = ntt(&w);
        let lhs = v_ntt
            .into_iter()
            .zip(w_ntt)
            .map(|(vv, ww)| a * vv + b * ww)
            .collect_vec();

        let rhs_coeffs = v
            .into_iter()
            .zip(w)
            .map(|(vv, ww)| a * vv + b * ww)
            .collect_vec();
        let rhs = ntt(&rhs_coeffs);

        assert_eq!(lhs, rhs);
    }

    #[test]
    fn test_ntt_inverse() {
        let mut rng = thread_rng();
        const N: usize = 256;
        let v: [Felt; N] = (0..N).map(|_| rng.gen()).collect_vec().try_into().unwrap();

        let v_ntt = ntt(&v);
        let v_again = intt(&v_ntt);
        let v_ntt_again = ntt(&v_again);

        assert_eq!(v.to_vec(), v_again,);
        assert_eq!(v_ntt, v_ntt_again);
    }

    #[test]
    fn test_ntt_a() {
        const N: usize = 512;
        let mut f = [Felt::new(0); N];
        f[0] = Felt::new(1);
        f[1] = Felt::new(2);

        let g = [
            7915, 4376, 5679, 6612, 4255, 8036, 303, 11988, 863, 11428, 3159, 9132, 11813, 478,
            5011, 7280, 2647, 9644, 5533, 6758, 105, 12186, 6349, 5942, 12111, 180, 6673, 5618,
            1355, 10936, 11749, 542, 8339, 3952, 6255, 6036, 10483, 1808, 5841, 6450, 2021, 10270,
            10937, 1354, 1575, 10716, 6965, 5326, 2643, 9648, 385, 11906, 9825, 2466, 4099, 8192,
            9397, 2894, 10115, 2176, 9561, 2730, 6891, 5400, 3913, 8378, 10019, 2272, 12017, 274,
            1771, 10520, 7065, 5226, 2007, 10284, 117, 12174, 483, 11808, 1951, 10340, 8425, 3866,
            5689, 6602, 6877, 5414, 2211, 10080, 285, 12006, 11363, 928, 6955, 5336, 4605, 7686,
            1211, 11080, 8427, 3864, 1009, 11282, 11773, 518, 9565, 2726, 11189, 1102, 6059, 6232,
            843, 11448, 8161, 4130, 12137, 154, 7205, 5086, 12155, 136, 9249, 3042, 6527, 5764,
            7201, 5090, 9897, 2394, 12275, 16, 801, 11490, 3457, 8834, 11725, 566, 12273, 18,
            10831, 1460, 7287, 5004, 113, 12178, 6399, 5892, 10413, 1878, 11059, 1232, 7131, 5160,
            1309, 10982, 3975, 8316, 3405, 8886, 7977, 4314, 937, 11354, 633, 11658, 765, 11526,
            7421, 4870, 12187, 104, 10893, 1398, 10679, 1612, 1947, 10344, 2509, 9782, 2719, 9572,
            10871, 1420, 4067, 8224, 7997, 4294, 7759, 4532, 3845, 8446, 7721, 4570, 10891, 1400,
            9073, 3218, 2101, 10190, 7637, 4654, 12237, 54, 2381, 9910, 5367, 6924, 7579, 4712,
            295, 11996, 10913, 1378, 8899, 3392, 9499, 2792, 11075, 1216, 9579, 2712, 8935, 3356,
            2037, 10254, 11851, 440, 2083, 10208, 7029, 5262, 4689, 7602, 2557, 9734, 11149, 1142,
            3947, 8344, 8649, 3642, 9833, 2458, 8151, 4140, 10631, 1660, 10159, 2132, 6525, 5766,
            1045, 11246, 4339, 7952, 2401, 9890, 10369, 1922, 5111, 7180, 12245, 46, 10595, 1696,
            12239, 52, 7913, 4378, 2721, 9570, 3925, 8366, 3189, 9102, 11923, 368, 10213, 2078,
            8597, 3694, 6659, 5632, 337, 11954, 5385, 6906, 8099, 4192, 7457, 4834, 2319, 9972,
            11981, 310, 1897, 10394, 2293, 9998, 2809, 9482, 651, 11640, 11533, 758, 1305, 10986,
            591, 11700, 12199, 92, 5839, 6452, 7525, 4766, 8033, 4258, 8155, 4136, 12131, 160,
            1671, 10620, 7141, 5150, 8481, 3810, 8093, 4198, 1419, 10872, 6301, 5990, 2639, 9652,
            2117, 10174, 8159, 4132, 1845, 10446, 883, 11408, 8645, 3646, 3917, 8374, 4157, 8134,
            2225, 10066, 7669, 4622, 10515, 1776, 8867, 3424, 11839, 452, 10973, 1318, 6109, 6182,
            3495, 8796, 6247, 6044, 5897, 6394, 5007, 7284, 11565, 726, 3133, 9158, 129, 12162,
            7313, 4978, 4919, 7372, 1367, 10924, 2587, 9704, 9475, 2816, 10859, 1432, 9549, 2742,
            11817, 474, 907, 11384, 837, 11454, 7545, 4746, 7983, 4308, 7939, 4352, 5535, 6756,
            313, 11978, 4563, 7728, 11753, 538, 10667, 1624, 4063, 8228, 7927, 4364, 1153, 11138,
            4895, 7396, 12285, 6, 4103, 8188, 3909, 8382, 3611, 8680, 5765, 6526, 7059, 5232, 6869,
            5422, 5817, 6474, 437, 11854, 6061, 6230, 8231, 4060, 3687, 8604, 4723, 7568, 6405,
            5886, 8987, 3304, 4115, 8176, 10739, 1552, 3025, 9266, 701, 11590, 3631, 8660, 10767,
            1524, 99, 12192, 2527, 9764, 11831, 460, 2967, 9324, 2979, 9312, 5001, 7290, 11885,
            406, 3167, 9124, 3387, 8904, 6019, 6272, 349, 11942, 1447, 10844, 5477, 6814, 11737,
            554, 11471, 820, 5311, 6980, 6631, 5660, 853, 11438, 9509, 2782, 3717, 8574, 3951,
            8340, 7515, 4776, 5851, 6440, 695, 11596,
        ]
        .map(Felt::new);

        assert_eq!(ntt(&f), g.to_vec());
    }

    #[test]
    fn test_intt_a() {
        const N: usize = 512;
        let mut f = [Felt::new(0); N];
        f[0] = Felt::new(1);
        f[1] = Felt::new(2);
        f[2] = Felt::new(3);
        f[3] = Felt::new(4);

        let g = [
            12049, 11544, 3185, 5360, 361, 5985, 4682, 8323, 1966, 8663, 4120, 9345, 1856, 1665,
            8140, 3609, 8678, 2872, 11310, 11008, 8555, 186, 9102, 1466, 1213, 11702, 2592, 1584,
            70, 8922, 10848, 2533, 3479, 5935, 5803, 4229, 4547, 6178, 6991, 4955, 3555, 7195,
            11963, 6628, 10782, 7355, 5918, 4982, 65, 3018, 6562, 6741, 9375, 9900, 11533, 11827,
            5100, 470, 9125, 8990, 7690, 11070, 4964, 4399, 1234, 9463, 10762, 1115, 9716, 4558,
            11360, 115, 6072, 415, 11587, 11860, 11758, 2192, 9351, 11859, 1874, 3257, 6365, 3207,
            4657, 887, 2971, 10691, 9022, 5988, 8793, 11518, 10905, 10041, 8126, 2235, 7407, 3791,
            783, 6623, 10518, 391, 3277, 10878, 1691, 3457, 1881, 7294, 6622, 10827, 3776, 3673,
            2226, 8446, 5790, 11731, 2489, 4398, 5116, 1761, 4500, 4752, 10943, 10101, 2448, 7599,
            4380, 6773, 6149, 398, 8773, 6044, 2067, 2576, 7132, 2993, 3189, 7595, 2995, 2513,
            2423, 2657, 7528, 3235, 11051, 7934, 556, 7167, 4832, 10903, 5513, 10879, 11575, 2392,
            4867, 3657, 3839, 908, 7170, 8478, 10150, 3345, 12257, 10904, 606, 345, 5783, 11044,
            7998, 11002, 5997, 5713, 11626, 10999, 1886, 2518, 2687, 9621, 10169, 9628, 9425, 7495,
            5237, 6614, 7585, 9976, 981, 6744, 2160, 6705, 8202, 916, 9040, 7580, 7018, 11116,
            6884, 8056, 12076, 1918, 7874, 9593, 474, 4386, 7921, 11019, 8811, 11529, 9028, 10615,
            4105, 11384, 1372, 5283, 1250, 10322, 11659, 5725, 680, 1781, 5556, 8030, 9218, 11095,
            8233, 5843, 10815, 4561, 4872, 8979, 2934, 1793, 1274, 7539, 8183, 4318, 11704, 9705,
            2387, 776, 1648, 9212, 6804, 4158, 3256, 8059, 3898, 5113, 4524, 10971, 4480, 9565,
            1183, 856, 1454, 2254, 10868, 8134, 8361, 11254, 6797, 8554, 6318, 3861, 4779, 4850,
            1864, 3870, 7712, 7554, 4160, 8004, 7243, 4306, 10128, 2093, 4825, 7553, 6886, 6939,
            167, 7943, 600, 4463, 7071, 2748, 5242, 1838, 3650, 8770, 7374, 410, 9359, 5754, 7649,
            8088, 1847, 869, 2883, 3810, 4544, 10009, 9335, 5022, 2177, 9574, 3112, 8729, 8656,
            6388, 12114, 7403, 2546, 5343, 9736, 488, 6104, 8707, 7066, 7049, 5975, 1394, 9546,
            9930, 8166, 5379, 9912, 1961, 2771, 665, 5982, 7752, 11142, 2328, 7285, 9231, 5668,
            185, 11828, 401, 6426, 3050, 5353, 3954, 2316, 4117, 9204, 9721, 6962, 6762, 288, 176,
            6835, 9184, 9398, 11205, 1752, 11583, 7472, 10028, 5967, 11610, 7604, 1916, 395, 11723,
            6791, 11660, 1198, 6279, 2023, 1919, 5469, 8528, 3460, 749, 5138, 1100, 12205, 4045,
            4663, 5514, 10572, 10557, 11778, 1230, 1917, 7316, 2868, 11975, 8023, 9682, 2445,
            11430, 6724, 6840, 4771, 2777, 12211, 8145, 12230, 1609, 1039, 5414, 5670, 9920, 6169,
            8549, 11441, 1464, 3061, 10746, 11926, 8858, 977, 8107, 5308, 5212, 10461, 8441, 823,
            5883, 87, 10294, 5265, 10967, 3095, 5305, 9746, 3115, 209, 11734, 7563, 1203, 1785,
            3139, 8440, 11862, 8836, 12227, 1642, 4585, 11492, 4292, 500, 528, 10774, 9315, 272,
            9037, 4583, 2118, 6145, 5506, 7802, 2037, 4326, 5748, 11716, 1698, 8547, 10402, 7160,
            5741, 5731, 5757, 11760, 11283, 10786, 2247, 6889, 8989, 10095, 12135, 1978, 8036,
            4017, 7093, 7368, 8599, 1792, 9659, 4893, 942, 7955, 4468, 10920, 2577, 8260, 8231,
            2008, 3958, 4985, 12146, 8859, 7462, 8119, 3953, 1575, 7107, 1664, 1069, 10688, 7897,
            6509, 7660, 10140, 10293, 7670, 12032, 109, 8942,
        ]
        .map(Felt::new);

        assert_eq!(intt(&f), g.to_vec());
    }
}
