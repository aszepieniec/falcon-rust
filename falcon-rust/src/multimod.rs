use std::{
    ops::{Add, Mul},
    str::FromStr,
};

use itertools::Itertools;
use num::{BigUint, FromPrimitive, Integer, One, ToPrimitive, Zero};

const N: usize = 40;

/// The vector of moduli by which we will be reducing every limb
pub const MODULI: [u32; N] = [
    2147493889u32,
    2147555329u32,
    2147565569u32,
    2147573761u32,
    2147577857u32,
    2147592193u32,
    2147645441u32,
    2147653633u32,
    2147706881u32,
    2147721217u32,
    2147731457u32,
    2147756033u32,
    2147817473u32,
    2147854337u32,
    2147878913u32,
    2147880961u32,
    2147899393u32,
    2147903489u32,
    2147934209u32,
    2147954689u32,
    2147985409u32,
    2147995649u32,
    2148014081u32,
    2148022273u32,
    2148063233u32,
    2148096001u32,
    2148118529u32,
    2148136961u32,
    2148149249u32,
    2148155393u32,
    2148182017u32,
    2148198401u32,
    2148241409u32,
    2148249601u32,
    2148261889u32,
    2148268033u32,
    2148278273u32,
    2148298753u32,
    2148315137u32,
    2148321281u32,
];

fn running_product_moduli() -> [BigUint; N] {
    [
    BigUint::from_str("2147493889").unwrap(),
    BigUint::from_str("4611861945316884481").unwrap(),
    BigUint::from_str("9904275922743901905746034689").unwrap(),
    BigUint::from_str("21270163093388866855538079227892195329").unwrap(),
    BigUint::from_str("45679331274140553549274796770132935471679229953").unwrap(),
    BigUint::from_str("98100575225804995587120994355199107791151086847314556929").unwrap(),
    BigUint::from_str("210685253143177644327705521842330098494933211809830171281501810689").unwrap(),
    BigUint::from_str("452478949332470137004778606538841089217891144435740272465729629422309083137").unwrap(),
    BigUint::from_str("971792152988996469972175743145060601078799719213604245503462361795873272762135965697").unwrap(),
    BigUint::from_str("2087138625488577686097345243205388961687711245848700393109062961389927250954467607766231093249").unwrap(),
    BigUint::from_str("4482613281081560290619539943021529384937265253041914496848600553970723199816443355887072021302377633793").unwrap(),
    BigUint::from_str("9627559718048845879231350220308965985385790773742043462476741327397762857778830710209225000457686080223180423169").unwrap(),
    BigUint::from_str("20678240984776264646897141812561996601974264069765350543432964879086128687047786568896372941771451160252226652513912231937").unwrap(),
    BigUint::from_str("44413849580682850996497799635015325482929685844628778737037800484313822097015704108254423926553259837331427029508998340203235360769").unwrap(),
    BigUint::from_str("95395570959502587796098660686948514036616213687392748162226263744158845756613471083967146390806407576013982308880606278674529365771682564097").unwrap(),
    BigUint::from_str("204898330627640110357471263367095894486489222243058489507113531270243359760365714377377066082312948269326592871035475448102081940376402052359608457217").unwrap(),
    BigUint::from_str("440100999981821502059265539601128407940322247156907428075826022997442231391570143369179573170320869623726989346455224996444864801770736159787157222974060769281").unwrap(),
    BigUint::from_str("945294473373343340848317137286731375752033458452641795214083271353200406881898836130891020280062987114317317600717007552143937703856657575705296496617536082836683921409").unwrap(),
    BigUint::from_str("2030430336937243790510447459259119763771425766723009518363501937114168875574349533002826024110460050697568360155697863449361315086078626039256413647572658541616771154914658580481").unwrap(),
    BigUint::from_str("4361272362912202698563049323603762762605406299848108459160515592284962164627781647538380408739289719843019680094471995863337350794349023423698311767627285382661645243238886292778247825409").unwrap(),
    BigUint::from_str("9367949400210364144563855213648201711573943556590415886526259881145091699737530894950421885463450403246504043342773588673556987550976261967503198494796407552236195566411383658297778401564511457281").unwrap(),
    BigUint::from_str("20122314551704021867228768001582302693135183701327798599358883948942914108742230804356582280689867814700786159561185084062916090613044176408481049760406032563034088296964742642093330752926745403050237370369").unwrap(),
    BigUint::from_str("43223014999371441515139306115681016465258596626973809788154960294774264570751876967109894883956930460005987472507338341614312452558290813200465302707013834222741741744877576755757617773476981087253930221945024165889").unwrap(),
    BigUint::from_str("92843998924862937374636096234247937930655196259462416012622266288605765805169816081907742649428237000804996804304737913734425923676464497565881884178352909229578904394810918529634443966849224028221198523525745289852818845697").unwrap(),
    BigUint::from_str("199434780495189605338837345075437750874906530685350344182064354131689412357893923246918138483262804373439405038009503640194046053011477574651088870624284298814644800602915450080466170015587488989602110939579538986055768143851225958401").unwrap(),
    BigUint::from_str("428405054442029590965124750946004875978820969813984863621466055034929854060031917308905788850261035506630496577967467769495773190483788985209182973283631475770827536410565067258964508026269592764195825090469160317369990312790011220188580454401").unwrap(),
    BigUint::from_str("920264835364177520718475470303623352614452336831170568870809274965066561721620439902656341744607336858519872055603010674864171377659673593253952885861880745510929188626956972339112901044598930966053379661279904580813996739454728788204988548306027696129").unwrap(),
    BigUint::from_str("1976854906754369627620700433331071215973841047519859115886781437534071465059400659767975329782638242737564164915631874373553280190989034524864496453472520370406261819543307113238303048685838473029266701149361023596599757862156189896173876745197912033144381523969").unwrap(),
    BigUint::from_str("4246579383326364143041817292714115200959723449875158672377993514065956029579681267670680718923101674375378164952826759296010824303759671081822739883290158075825413152549328698279218652068894352773126019094707319668907048805172664846167301303615459090367166279283482849281").unwrap(),
    BigUint::from_str("9122312404095143412957103241864486176164908704637887278799506901759804802642459838367849334335778014096798511457858393576438535614496807610323662950325943654406864190101972141738173367267986011456835163386916506503337651306545866285475803675617478843143102592970557858505986322433").unwrap(),
    BigUint::from_str("19596387459933224236750453976585690754582550905749873949190166074827798330466766305426540570985538969586715059586139854413413577112876086612406036299459356446952088454538325951116919149993423969619129269721030852350933493015738384340145709744583969421717976747805423002100590304698534287361").unwrap(),
    BigUint::from_str("42096928206805003872161770668525472318474719278232980923601870006869522723859176960957972077552761808589368921845565357013267839305570605771908153941246546683831517741649793001406169882062152532050886076227016193091942420553753865073824453780325401521967452322590789952241107733709494143152574709761").unwrap(),
    BigUint::from_str("90434364365558624906583258096888032605830627673150681969588602578592223175460756232188691925664602299525414195086328202951770534804184579692427505241332384664458497191930249301899129368734562381025913164092406670513650452077266763345388533607701617044042104229622761137425479985584880494763334796474736693249").unwrap(),
    BigUint::from_str("194275587164999934097676146479919735387150636172425510954046609623608314578386522566957620786020903549779153533953940722546188073636646136454610090856117704063801485473623778482635333208631405509948527925422160157060688048728457945527292342512720089341918249838487508993992593546266205274508016565956269307852223643649").unwrap(),
    BigUint::from_str("417354839869666913109549268947193071311180371991326557873930361784058376872270869541833507412722931053335369903672918335611098880819932528724532436541025046138445155704573078038423734616918934305527032893836660901467730395201121114115520148781611065657918066281603120974339018663711047039876355213624508194679340497555863592961").unwrap(),
    BigUint::from_str("896590060909839315791033321517774440176898188646015397544489040288817460040566033153834280183021210267943393192290819748212889245667537880675767296292685199671571820323841935462360054786002447520990779983168781338084087989073025095215717004794938950591969495125943160782204327099840819504725650177982417019976167876421576388466640115713").unwrap(),
    BigUint::from_str("1926124947640354414035062692835658213146768655201290166568283356139088194268193707646179850759778929516787299988894479162445080545022931010460217440229529063283104477360769453840056314999858722534167204071164798640493913673945841222435681089517604167918148554657843090941355240955173134300516735103158209460040208426717021543752690745896443803649").unwrap(),
    BigUint::from_str("4137891823137963680149570881295666573237411307948418628829805423344258062303382289698734738600959176836589049132378923433265250965857323046176715082953949320428351434682857748805084042963971688796324404399579860176869170049827499287694569307316350405486161146040196653938979060274012973316901629277746107744717183092976269266318040469803970090513723549697").unwrap(),
    BigUint::from_str("8889495638915814213421549548341910671790849807560556155527855587735162757280645259257511008684178802317104029699526358031447747986055157282400386989646179999007090711084850096175705712056658724680597027934126810058311535286671460958610961075603320423702007834059422082113859389512697438311076868117344340510808856222641397646618930597458460368145892408047436863489").unwrap(),
    BigUint::from_str("19097492658439535442135790718698864960409289022657097485116037947426212743464647899874673159047997129026926697294348510579384464237967185629582878132492415152223491844521006058309165296404578215985646522896236092200915522184138735232744587878581263180500960232338573077566533591531796126437871133803321251924281076346369788595814766299982054922382915172944644271337310609409").unwrap(),
]
}

const RUNNING_PRODUCTS_INVERSE: [u32; N] = [
    0u32,
    1503323684u32,
    159773123u32,
    2007913096u32,
    1974774410u32,
    843420755u32,
    1361033442u32,
    2079559609u32,
    1173204836u32,
    464486159u32,
    69674441u32,
    1588678185u32,
    1866125400u32,
    1285015444u32,
    2099868023u32,
    833688475u32,
    856906059u32,
    489575720u32,
    1855758800u32,
    1931755222u32,
    1246649487u32,
    129962044u32,
    1135169192u32,
    1783384435u32,
    1764374507u32,
    518126838u32,
    1395738876u32,
    1561268851u32,
    2028026040u32,
    216562897u32,
    1045105137u32,
    1358119771u32,
    21089898u32,
    861217156u32,
    1733547120u32,
    655136419u32,
    448887258u32,
    1903446220u32,
    971098707u32,
    824211100u32,
];

fn inverses_mod_running_product() -> [BigUint; N] {
    [
    BigUint::from_str("0").unwrap(),
    BigUint::from_str("644213214").unwrap(),
    BigUint::from_str("4268751776070110783").unwrap(),
    BigUint::from_str("644093249244118495658626426").unwrap(),
    BigUint::from_str("1711489755218583027167536646071346552").unwrap(),
    BigUint::from_str("27739754013286384644849430946344488739376372655").unwrap(),
    BigUint::from_str("35931019202820240551508904315743096731493413644896290592").unwrap(),
    BigUint::from_str("6680037443438913200727579180019551105537298715512036721038012489").unwrap(),
    BigUint::from_str("205308119718197025887624805186043920568349834718446044130689133965265891486").unwrap(),
    BigUint::from_str("761623346667519719574205098239698203470505784895309741948257108342518056168378278131").unwrap(),
    BigUint::from_str("2019429873285659701754619288801144034667879595813915913781881316506729097824786438774665026105").unwrap(),
    BigUint::from_str("1166859619108004079233251991100108001046639300803607152851200199387618147389951317819551601134179398105").unwrap(),
    BigUint::from_str("1262680506607683655331817244298877779410732593383492876631966471947706105178018075595988437189863358896937326506").unwrap(),
    BigUint::from_str("8306890394351533737459294813629164016217565141358098453141353708092987000350692590382498857879128317310838591397550483566").unwrap(),
    BigUint::from_str("992769393930313465524136948179425112720557736962628017000444738243183096131727933312016848852557563700769493357739982301171793547").unwrap(),
    BigUint::from_str("58368291739170600702199790107200142650636660163468855556231202537498437039209087018360091910912841466846564864759199214559492774461764418663").unwrap(),
    BigUint::from_str("123153989358202411216249995980830930250570138774946354168364213719522537249674605529041067482038955777845162818312096092212290474141272081685519378103").unwrap(),
    BigUint::from_str("339787943532933612207643621954803958429715310764961883322548358479569967442780331207154021684216587599786261955270682707451687359416125118714523375136064942810").unwrap(),
    BigUint::from_str("128584850609498440326662475791156734625796473035774031776766130162080449615710369806381281664644644525928955967278600372998549242573583781752899800929375542887061493298").unwrap(),
    BigUint::from_str("204370212683970876797866381167096354804227511614692629350020628418177413912460649632870303022677314998802219920443542974006700665569420710335830416084133058018405546521062398252").unwrap(),
    BigUint::from_str("1830073626127964458794056052743826563070573916295258827800278911190472830344024631174152047556001139139874780509785093933411051897542014177340584759492558090620836628481788650247970071411").unwrap(),
    BigUint::from_str("8801152231553756239948946884247867348345236587382248687197345042254366750291730700677818818893102847715426754215968915051412832615303285098835352672301697047659352847399637110248519833570840113094").unwrap(),
    BigUint::from_str("9488198251966554398470395438794788420007990719482608142633495280346333776107847911566331718336950701863341428437072147468925235976273225746393236750472644898009235473142810276691378129791866980262909147482").unwrap(),
    BigUint::from_str("7337329290911116075295854649102190078423966502778354795847157740743934330293120965105071412308077127677404087620538510133385531499715846335956279245294898274581792077258645428812325819375253808843146233583255664271").unwrap(),
    BigUint::from_str("16583867326137521653624387731295426382236378326425691326361916866116712960860948242914920478365165930506353114549005553359638824466949897864241932773154906711580390121467528670989190126582630727182498964956994000401536964631").unwrap(),
    BigUint::from_str("151330546719281810413111531483063099213960091313644374159514742710125916405427084316594005201112034821765755180055536928701978623817833610755511733523347295693302898049124942962651940521964984739829357594534996172653453523539819844364").unwrap(),
    BigUint::from_str("150049097316147368079460616774218314247059574903824781560166391469387779987361886916529283950350705649492273531126387321293812003621936105378153096249674833618239847773048938138097210039065042247664987068139516265391425793222749164094934705926").unwrap(),
    BigUint::from_str("251415107339441203948698102280103434755204699259952103603712758503771645266973148879700558003280783582352268231705899028598931482713419437732888615454909848349930233928569200484967339711753509707460510978530562038182188574162315302434969797959731756431").unwrap(),
    BigUint::from_str("110544532805285846524499830448893932448689856690682374569134542922173705640071465475742831892181891037570617297956151003191345178743553731046419300338027090319304347115092357772535451945511515171232623724882178544545013782245435214423401032785338153904509019978").unwrap(),
    BigUint::from_str("3818467182230290589440167607469549757778316279381977013417415630744582319795924731179097840937128329648969650020626027515772342899551403751300689242420734471474134670090873907013293456410353460324993820847712468996759425771009520911869969901490566166201089284907339907889").unwrap(),
    BigUint::from_str("4684245480812331937101991398838603532545593346430477184880861154109396862671837716083120686522899462556339107463806074803441509946039186729099260454993901435940994566756682011622789808907083935151222330851087323302083766577658925518823872937203095782064869134305704829117496915473").unwrap(),
    BigUint::from_str("7207289117283549126175238378132874622218959579944366382781259700729301674427356574092135142578794042637723525834700471487479359979628107855802794708069945203487549622191743661926272168306845750662041981109403375825880159652436661104225343083373122984031506741298409574633195861003483045031").unwrap(),
    BigUint::from_str("41683650668128325082960804855237495603191853531575842918533879423761766637608782832897221334709951335531661786638726531418437587442738706087803445282784415874763659875794557321922640301060875581727750899124000022549138508765201346518628537155978841816997470371738588100921059078269511237064441856408").unwrap(),
    BigUint::from_str("54179905829958439175037811290394766141479625015910701462635595676695695870164819406878037106843559631370235814204005046207604741218330744534765222589235958197381983008200555475621745321955142016691943343663414632741967374028787249543472292205064342062292407747825865274931661216747910615908018259867214446206").unwrap(),
    BigUint::from_str("37504252002988594913500784319052860225843396530342902687417366982526169613976193895542833761579735144115821373605926397082043789302998100346840953903113190627211184636926145686669248882651291190970632612885076590872029831512541058072815640319089415924136886738138580180262677843488327196649427540442080379012730702738").unwrap(),
    BigUint::from_str("290078191404762809508164877466964789740684953475975228720152002380158772175666440819855231464238780198093354465307620709981115167593363104326173473516399573197541073678328344418677846091874439806818811303051877672370134483076166419746182939268177931308475218644567079739184515212922222399554974256118103634546699922695889066335").unwrap(),
    BigUint::from_str("709245684229141602620038993501896319012521052646150176904366866364890800423814299897180074744450390056041284982818976891034053804480077964086238781017840717390781944749264508064474824113365832604676142624302786603865530246928172058871401602976241230229824090936618666269953196779172796017272535136092432245033730415297300391538409344552").unwrap(),
    BigUint::from_str("219530254647144577704931457060996518770143421477394267310379105923354248056468201400025950781759749693535215874377824531856625084973870578323346322759317029004478236731269729318585312044986930574564746750729326149527347016129360164521397431704688574385685551006909619117364997698110883457292918606883492375250383676561957022745344699596538666806").unwrap(),
    BigUint::from_str("2267448641898511652583184167598609802011034697831981994909957485471074133712397370686296237037035948013854195450243068157161088785402255314359346563167749105421673499441870748800741612476016068822159964359618854418244083220422260994983318320466001029240744505700584718939207645298329606389496940308311830046762507934779720253124876085839427043883153769903").unwrap(),
    BigUint::from_str("5479009021390190009431825109661274909425809357251729975092423344484789721080519456080486886597247539797779360247034308248464947025704150153685809218276997799028858897077591983880311009307586087349313232374910643797352723585864080567863998726734703555929194504506627999977988031137604928301371849673433432768333102533449547547426434599205164275448512037909760612710").unwrap()
]
}

/// An integer, smaller than the product of all moduli, represented
/// as the list of of residues modulo moduli {0, ..., num-1} for num <= N.
/// Every limb stores at least 31 bits, so the total capacity is 1240 bits.
pub struct MultiModInt {
    limbs: [u32; N],
    num: usize,
}

impl Add for MultiModInt {
    type Output = MultiModInt;

    fn add(self, rhs: Self) -> Self::Output {
        let num_limbs_active = usize::min(self.num, rhs.num);
        let mut limbs = [0u32; N];
        for i in 0..num_limbs_active {
            limbs[i] = (self.limbs[i] + rhs.limbs[i]) % MODULI[i];
        }
        Self {
            limbs,
            num: num_limbs_active,
        }
    }
}

impl Mul for MultiModInt {
    type Output = MultiModInt;

    fn mul(self, rhs: Self) -> Self::Output {
        let num_limbs_active = usize::min(self.num, rhs.num);
        let mut limbs = [0u32; N];
        for i in 0..num_limbs_active {
            limbs[i] =
                (((self.limbs[i] as u64) * (rhs.limbs[i] as u64)) % (MODULI[i] as u64)) as u32;
        }
        Self {
            limbs,
            num: num_limbs_active,
        }
    }
}

impl Zero for MultiModInt {
    fn zero() -> Self {
        Self {
            limbs: [0u32; N],
            num: N,
        }
    }

    fn is_zero(&self) -> bool {
        self.limbs == [0u32; N]
    }
}

impl One for MultiModInt {
    fn one() -> Self {
        Self {
            limbs: [1u32; N],
            num: N,
        }
    }
}

impl From<BigUint> for MultiModInt {
    fn from(value: BigUint) -> Self {
        let limbs = (0..N)
            .map(|i| value.mod_floor(&MODULI[i].into()).to_u32().unwrap())
            .collect_vec();
        Self {
            limbs: limbs.try_into().unwrap(),
            num: N,
        }
    }
}

impl From<MultiModInt> for BigUint {
    fn from(value: MultiModInt) -> BigUint {
        // x % a
        // y % b
        // => x * b * [b^-1]_a + y * a * [a^-1]_b
        //    ^   ^^^^^^^^^^^^   ^   ^^^^^^^^^^^^--- running modulus cofactor
        //    |        |          ------------------ new limb
        //    |         ---------------------------- new modulus cofactor
        //     ------------------------------------- running integer
        let running_modulus_cofactors = MODULI
            .iter()
            .zip(inverses_mod_running_product())
            .map(|(m, irp)| BigUint::from_u32(*m).unwrap() * irp);
        let new_modulus_cofactors = running_product_moduli()
            .into_iter()
            .zip(RUNNING_PRODUCTS_INVERSE.iter())
            .map(|(rp, rpi)| rp * BigUint::from_u32(*rpi).unwrap());
        value
            .limbs
            .iter()
            .zip(running_modulus_cofactors.zip(new_modulus_cofactors))
            .take(value.num)
            .fold(BigUint::zero(), |i, (l, (rc, nc))| i * nc + l * rc)
    }
}

#[cfg(test)]
mod test {
    use num::{BigUint, FromPrimitive};
    use rand::{thread_rng, Rng};

    use super::MultiModInt;

    #[test]
    fn to_and_fro() {
        let mut rng = thread_rng();
        for _ in 0..1000 {
            let big = BigUint::from_u128(rng.gen()).unwrap();
            let multimod = MultiModInt::from(big.clone());
            let big_again = BigUint::from(multimod);
            assert_eq!(big, big_again);
        }
    }
}
